## THIS FILE WAS GENERATED BY MIB2SCHEMA
## For attributes containing printable ASCII
## characters, you may add a format string
## specification in the attribute characteristics
## line
## As described in RFC 1157, some agents cannot
## accept messages whose length exceeds 484 octets
## For those groups whose var-bind list has many
## entries, you may split them up into different
## var-bind lists
proxy ENTITY-MIB
description "ENTITY-MIB agent"
serial 2
rpcid 100122
(

## Enumerated Type Definitions

	enum	entPhysicalClassE (
	   1	"other"
	   2	"unknown"
	   3	"chassis"
	   4	"backplane"
	   5	"container"
	   6	"powerSupply"
	   7	"fan"
	   8	"sensor"
	   9	"module"
	   10	"port"
	   11	"stack"
	   12	"cpu"
	)

	enum	entPhysicalIsFRUE (
	   1	"true"
	   2	"false"
	)


## Group and Table Declarations

	table	entPhysicalTable
	description "This table contains one row per physical entity.  There is
        always at least one row for an 'overall' physical entity."
	characteristics "-K ONE"
	(
		notaccessible int	entPhysicalIndex
		description 	"The index for this entry."
		characteristics "-N entPhysicalIndex -O 1.3.6.1.2.1.47.1.1.1.1.1 -T INTEGER -A NA -X equal -F 0"

		readonly octet[255]	entPhysicalDescr
		description 	"A textual description of physical entity.  This object
        should contain a string that identifies the manufacturer's
        name for the physical entity, and should be set to a
        distinct value for each version or model of the physical
        entity."
		characteristics "-N entPhysicalDescr -O 1.3.6.1.2.1.47.1.1.1.1.2 -T STRING -A RO -X equal -F 0"

		readonly objectid	entPhysicalVendorType
		description 	"An indication of the vendor-specific hardware type of the
        physical entity.  Note that this is different from the
        definition of MIB-II's sysObjectID.
        
        An agent should set this object to an enterprise-specific
        registration identifier value indicating the specific
        equipment type in detail.  The associated instance of
        entPhysicalClass is used to indicate the general type of
        hardware device.
        
        If no vendor-specific registration identifier exists for
        this physical entity, or the value is unknown by this agent,
        then the value { 0 0 } is returned."
		characteristics "-N entPhysicalVendorType -O 1.3.6.1.2.1.47.1.1.1.1.3 -T OBJECTID -A RO -X equal -F 0"

		readonly int	entPhysicalContainedIn
		description 	"The value of entPhysicalIndex for the physical entity which
        'contains' this physical entity.  A value of zero indicates
        this physical entity is not contained in any other physical
        entity.  Note that the set of 'containment' relationships
        define a strict hierarchy; that is, recursion is not
        allowed.
        
        In the event that a physical entity is contained by more
        than one physical entity (e.g., double-wide modules), this
        object should identify the containing entity with the lowest
        value of entPhysicalIndex."
		characteristics "-N entPhysicalContainedIn -O 1.3.6.1.2.1.47.1.1.1.1.4 -T INTEGER -A RO -X equal -F 0"

		readonly enum entPhysicalClassE	entPhysicalClass
		description 	"An indication of the general hardware type of the physical
        entity.
        
        An agent should set this object to the standard enumeration
        value that most accurately indicates the general class of
        the physical entity, or the primary class if there is more
        than one entity.
        
        If no appropriate standard registration identifier exists
        for this physical entity, then the value 'other(1)' is
        returned.  If the value is unknown by this agent, then the
        value 'unknown(2)' is returned."
		characteristics "-N entPhysicalClass -O 1.3.6.1.2.1.47.1.1.1.1.5 -T INTEGER -A RO -X equal -F 0"

		readonly int	entPhysicalParentRelPos
		description 	"An indication of the relative position of this 'child'
        component among all its 'sibling' components.  Sibling
        components are defined as entPhysicalEntries that share the
        same instance values of each of the entPhysicalContainedIn
        and entPhysicalClass objects.
        
        An NMS can use this object to identify the relative ordering
        for all sibling components of a particular parent
        (identified by the entPhysicalContainedIn instance in each
        sibling entry).
        
        If possible, this value should match any external labeling
        of the physical component.  For example, for a container
        (e.g., card slot) labeled as 'slot #3',
        entPhysicalParentRelPos should have the value '3'.  Note
        that the entPhysicalEntry for the module plugged in slot 3
        should have an entPhysicalParentRelPos value of '1'.
        
        If the physical position of this component does not match
        any external numbering or clearly visible ordering, then
        user documentation or other external reference material
        should be used to determine the parent-relative position.
        If this is not possible, then the agent should assign a
        consistent (but possibly arbitrary) ordering to a given set
        of 'sibling' components, perhaps based on internal
        representation of the components.
        
        
        If the agent cannot determine the parent-relative position
        for some reason, or if the associated value of
        entPhysicalContainedIn is '0', then the value '-1' is
        returned.  Otherwise, a non-negative integer is returned,
        indicating the parent-relative position of this physical
        entity.
        
        Parent-relative ordering normally starts from '1' and
        continues to 'N', where 'N' represents the highest
        positioned child entity.  However, if the physical entities
        (e.g., slots) are labeled from a starting position of zero,
        then the first sibling should be associated with an
        entPhysicalParentRelPos value of '0'.  Note that this
        ordering may be sparse or dense, depending on agent
        implementation.
        
        The actual values returned are not globally meaningful, as
        each 'parent' component may use different numbering
        algorithms.  The ordering is only meaningful among siblings
        of the same parent component.
        
        The agent should retain parent-relative position values
        across reboots, either through algorithmic assignment or use
        of non-volatile storage."
		characteristics "-N entPhysicalParentRelPos -O 1.3.6.1.2.1.47.1.1.1.1.6 -T INTEGER -A RO -X equal -F 0"

		readonly octet[255]	entPhysicalName
		description 	"The textual name of the physical entity.  The value of this
        object should be the name of the component as assigned by
        the local device and should be suitable for use in commands
        entered at the device's `console'.  This might be a text
        name (e.g., `console') or a simple component number (e.g.,
        port or module number, such as `1'), depending on the
        physical component naming syntax of the device.
        
        If there is no local name, or if this object is otherwise
        not applicable, then this object contains a zero-length
        string.
        
        Note that the value of entPhysicalName for two physical
        entities will be the same in the event that the console
        interface does not distinguish between them, e.g., slot-1
        and the card in slot-1."
		characteristics "-N entPhysicalName -O 1.3.6.1.2.1.47.1.1.1.1.7 -T STRING -A RO -X equal -F 0"

		readonly octet[255]	entPhysicalHardwareRev
		description 	"The vendor-specific hardware revision string for the
        physical entity.  The preferred value is the hardware
        revision identifier actually printed on the component itself
        (if present).
        
        Note that if revision information is stored internally in a
        non-printable (e.g., binary) format, then the agent must
        convert such information to a printable format, in an
        implementation-specific manner.
        
        If no specific hardware revision string is associated with
        the physical component, or if this information is unknown to
        the agent, then this object will contain a zero-length
        string."
		characteristics "-N entPhysicalHardwareRev -O 1.3.6.1.2.1.47.1.1.1.1.8 -T STRING -A RO -X equal -F 0"

		readonly octet[255]	entPhysicalFirmwareRev
		description 	"The vendor-specific firmware revision string for the
        physical entity.
        
        Note that if revision information is stored internally in a
        non-printable (e.g., binary) format, then the agent must
        convert such information to a printable format, in an
        implementation-specific manner.
        
        If no specific firmware programs are associated with the
        physical component, or if this information is unknown to the
        agent, then this object will contain a zero-length string."
		characteristics "-N entPhysicalFirmwareRev -O 1.3.6.1.2.1.47.1.1.1.1.9 -T STRING -A RO -X equal -F 0"

		readonly octet[255]	entPhysicalSoftwareRev
		description 	"The vendor-specific software revision string for the
        physical entity.
        
        Note that if revision information is stored internally in a
        
        
        non-printable (e.g., binary) format, then the agent must
        convert such information to a printable format, in an
        implementation-specific manner.
        
        If no specific software programs are associated with the
        physical component, or if this information is unknown to the
        agent, then this object will contain a zero-length string."
		characteristics "-N entPhysicalSoftwareRev -O 1.3.6.1.2.1.47.1.1.1.1.10 -T STRING -A RO -X equal -F 0"

		readwrite octet[32]	entPhysicalSerialNum
		description 	"The vendor-specific serial number string for the physical
        entity.  The preferred value is the serial number string
        actually printed on the component itself (if present).
        
        On the first instantiation of an physical entity, the value
        of entPhysicalSerialNum associated with that entity is set
        to the correct vendor-assigned serial number, if this
        information is available to the agent.  If a serial number
        is unknown or non-existent, the entPhysicalSerialNum will be
        set to a zero-length string instead.
        
        Note that implementations that can correctly identify the
        serial numbers of all installed physical entities do not
        need to provide write access to the entPhysicalSerialNum
        object.  Agents which cannot provide non-volatile storage
        for the entPhysicalSerialNum strings are not required to
        implement write access for this object.
        
        Not every physical component will have a serial number, or
        even need one.  Physical entities for which the associated
        value of the entPhysicalIsFRU object is equal to 'false(2)'
        (e.g., the repeater ports within a repeater module), do not
        need their own unique serial number.  An agent does not have
        to provide write access for such entities, and may return a
        zero-length string.
        
        If write access is implemented for an instance of
        entPhysicalSerialNum, and a value is written into the
        instance, the agent must retain the supplied value in the
        entPhysicalSerialNum instance (associated with the same
        physical entity) for as long as that entity remains
        instantiated.  This includes instantiations across all
        re-initializations/reboots of the network management system,
        including those resulting in a change of the physical
        
        
        entity's entPhysicalIndex value."
		characteristics "-N entPhysicalSerialNum -O 1.3.6.1.2.1.47.1.1.1.1.11 -T STRING -A RW -X equal -F 0"

		readonly octet[255]	entPhysicalMfgName
		description 	"The name of the manufacturer of this physical component.
        The preferred value is the manufacturer name string actually
        printed on the component itself (if present).
        
        Note that comparisons between instances of the
        entPhysicalModelName, entPhysicalFirmwareRev,
        entPhysicalSoftwareRev, and the entPhysicalSerialNum
        objects, are only meaningful amongst entPhysicalEntries with
        the same value of entPhysicalMfgName.
        
        If the manufacturer name string associated with the physical
        component is unknown to the agent, then this object will
        contain a zero-length string."
		characteristics "-N entPhysicalMfgName -O 1.3.6.1.2.1.47.1.1.1.1.12 -T STRING -A RO -X equal -F 0"

		readonly octet[255]	entPhysicalModelName
		description 	"The vendor-specific model name identifier string associated
        with this physical component.  The preferred value is the
        customer-visible part number, which may be printed on the
        component itself.
        
        If the model name string associated with the physical
        component is unknown to the agent, then this object will
        contain a zero-length string."
		characteristics "-N entPhysicalModelName -O 1.3.6.1.2.1.47.1.1.1.1.13 -T STRING -A RO -X equal -F 0"

		readwrite octet[32]	entPhysicalAlias
		description 	"This object is an 'alias' name for the physical entity, as
        specified by a network manager, and provides a non-volatile
        'handle' for the physical entity.
        
        On the first instantiation of a physical entity, the value
        
        
        of entPhysicalAlias associated with that entity is set to
        the zero-length string.  However, the agent may set the
        value to a locally unique default value, instead of a
        zero-length string.
        
        If write access is implemented for an instance of
        entPhysicalAlias, and a value is written into the instance,
        the agent must retain the supplied value in the
        entPhysicalAlias instance (associated with the same physical
        entity) for as long as that entity remains instantiated.
        This includes instantiations across all
        re-initializations/reboots of the network management system,
        including those resulting in a change of the physical
        entity's entPhysicalIndex value."
		characteristics "-N entPhysicalAlias -O 1.3.6.1.2.1.47.1.1.1.1.14 -T STRING -A RW -X equal -F 0"

		readwrite octet[32]	entPhysicalAssetID
		description 	"This object is a user-assigned asset tracking identifier
        (as specified by a network manager) for the physical entity,
        and provides non-volatile storage of this information.
        
        On the first instantiation of a physical entity, the value
        of entPhysicalAssetID associated with that entity is set to
        the zero-length string.
        
        Not every physical component will have an asset tracking
        identifier, or even need one.  Physical entities for which
        the associated value of the entPhysicalIsFRU object is equal
        to 'false(2)' (e.g., the repeater ports within a repeater
        module), do not need their own unique asset tracking
        identifier.  An agent does not have to provide write access
        for such entities, and may instead return a zero-length
        string.
        
        If write access is implemented for an instance of
        entPhysicalAssetID, and a value is written into the
        instance, the agent must retain the supplied value in the
        entPhysicalAssetID instance (associated with the same
        physical entity) for as long as that entity remains
        instantiated.  This includes instantiations across all
        re-initializations/reboots of the network management system,
        including those resulting in a change of the physical
        entity's entPhysicalIndex value.
        
        
        If no asset tracking information is associated with the
        physical component, then this object will contain a
        zero-length string."
		characteristics "-N entPhysicalAssetID -O 1.3.6.1.2.1.47.1.1.1.1.15 -T STRING -A RW -X equal -F 0"

		readonly enum entPhysicalIsFRUE	entPhysicalIsFRU
		description 	"This object indicates whether or not this physical entity
        is considered a 'field replaceable unit' by the vendor.  If
        this object contains the value 'true(1)' then this
        entPhysicalEntry identifies a field replaceable unit.  For
        all entPhysicalEntries that represent components
        permanently contained within a field replaceable unit, the
        value 'false(2)' should be returned for this object."
		characteristics "-N entPhysicalIsFRU -O 1.3.6.1.2.1.47.1.1.1.1.16 -T INTEGER -A RO -X equal -F 0"

		readonly octet[11]	entPhysicalMfgDate
		description 	"This object contains the date of manufacturing of the
        managed entity.  If the manufacturing date is unknown or not
        supported, the object is not instantiated.  The special
        value '0000000000000000'H may also be returned in this
        case."
		characteristics "-N entPhysicalMfgDate -O 1.3.6.1.2.1.47.1.1.1.1.17 -T STRING -A RO -X equal -F 0"

		readwrite octet[128]	entPhysicalUris
		description 	"This object contains additional identification information
        about the physical entity.  The object contains URIs and,
        therefore, the syntax of this object must conform to RFC
        3986, section 2.
        
        Multiple URIs may be present and are separated by white
        space characters.  Leading and trailing white space
        characters are ignored.
        
        If no additional identification information is known
        about the physical entity or supported, the object is not
        instantiated.  A zero length octet string may also be
        
        
        returned in this case."
		characteristics "-N entPhysicalUris -O 1.3.6.1.2.1.47.1.1.1.1.18 -T STRING -A RW -X equal -F 0"

	)

	table	entLogicalTable
	description "This table contains one row per logical entity.  For agents
        that implement more than one naming scope, at least one
        entry must exist.  Agents which instantiate all MIB objects
        within a single naming scope are not required to implement
        this table."
	characteristics "-K ONE"
	(
		notaccessible int	entLogicalIndex
		description 	"The value of this object uniquely identifies the logical
        entity.  The value should be a small positive integer; index
        values for different logical entities are not necessarily
        contiguous."
		characteristics "-N entLogicalIndex -O 1.3.6.1.2.1.47.1.2.1.1.1 -T INTEGER -A NA -X equal -F 0"

		readonly octet[255]	entLogicalDescr
		description 	"A textual description of the logical entity.  This object
        should contain a string that identifies the manufacturer's
        name for the logical entity, and should be set to a distinct
        value for each version of the logical entity."
		characteristics "-N entLogicalDescr -O 1.3.6.1.2.1.47.1.2.1.1.2 -T STRING -A RO -X equal -F 0"

		readonly objectid	entLogicalType
		description 	"An indication of the type of logical entity.  This will
        typically be the OBJECT IDENTIFIER name of the node in the
        SMI's naming hierarchy which represents the major MIB
        module, or the majority of the MIB modules, supported by the
        logical entity.  For example:
           a logical entity of a regular host/router -> mib-2
           a logical entity of a 802.1d bridge -> dot1dBridge
           a logical entity of a 802.3 repeater -> snmpDot3RptrMgmt
        If an appropriate node in the SMI's naming hierarchy cannot
        be identified, the value 'mib-2' should be used."
		characteristics "-N entLogicalType -O 1.3.6.1.2.1.47.1.2.1.1.3 -T OBJECTID -A RO -X equal -F 0"

		readonly octet[255]	entLogicalCommunity
		description 	"An SNMPv1 or SNMPv2C community-string, which can be used to
        access detailed management information for this logical
        entity.  The agent should allow read access with this
        community string (to an appropriate subset of all managed
        objects) and may also return a community string based on the
        privileges of the request used to read this object.  Note
        that an agent may return a community string with read-only
        privileges, even if this object is accessed with a
        read-write community string.  However, the agent must take
        
        
        care not to return a community string that allows more
        privileges than the community string used to access this
        object.
        
        A compliant SNMP agent may wish to conserve naming scopes by
        representing multiple logical entities in a single 'default'
        naming scope.  This is possible when the logical entities,
        represented by the same value of entLogicalCommunity, have
        no object instances in common.  For example, 'bridge1' and
        'repeater1' may be part of the main naming scope, but at
        least one additional community string is needed to represent
        'bridge2' and 'repeater2'.
        
        Logical entities 'bridge1' and 'repeater1' would be
        represented by sysOREntries associated with the 'default'
        naming scope.
        
        For agents not accessible via SNMPv1 or SNMPv2C, the value
        of this object is the empty string.  This object may also
        contain an empty string if a community string has not yet
        been assigned by the agent, or if no community string with
        suitable access rights can be returned for a particular SNMP
        request.
        
        Note that this object is deprecated.  Agents which implement
        SNMPv3 access should use the entLogicalContextEngineID and
        entLogicalContextName objects to identify the context
        associated with each logical entity.  SNMPv3 agents may
        return a zero-length string for this object, or may continue
        to return a community string (e.g., tri-lingual agent
        support)."
		characteristics "-N entLogicalCommunity -O 1.3.6.1.2.1.47.1.2.1.1.4 -T STRING -A RO -X equal -F 0"

		readonly octet[255]	entLogicalTAddress
		description 	"The transport service address by which the logical entity
        receives network management traffic, formatted according to
        the corresponding value of entLogicalTDomain.
        
        For snmpUDPDomain, a TAddress is 6 octets long: the initial
        4 octets contain the IP-address in network-byte order and
        the last 2 contain the UDP port in network-byte order.
        Consult 'Transport Mappings for the Simple Network
        Management Protocol' (STD 62, RFC 3417 [RFC3417]) for
        further information on snmpUDPDomain."
		characteristics "-N entLogicalTAddress -O 1.3.6.1.2.1.47.1.2.1.1.5 -T STRING -A RO -X equal -F 0"

		readonly objectid	entLogicalTDomain
		description 	"Indicates the kind of transport service by which the
        logical entity receives network management traffic.
        Possible values for this object are presently found in the
        Transport Mappings for Simple Network Management Protocol'
        (STD 62, RFC 3417 [RFC3417])."
		characteristics "-N entLogicalTDomain -O 1.3.6.1.2.1.47.1.2.1.1.6 -T OBJECTID -A RO -X equal -F 0"

		readonly octet[32]	entLogicalContextEngineID
		description 	"The authoritative contextEngineID that can be used to send
        an SNMP message concerning information held by this logical
        entity, to the address specified by the associated
        'entLogicalTAddress/entLogicalTDomain' pair.
        
        This object, together with the associated
        entLogicalContextName object, defines the context associated
        with a particular logical entity, and allows access to SNMP
        engines identified by a contextEngineId and contextName
        pair.
        
        If no value has been configured by the agent, a zero-length
        string is returned, or the agent may choose not to
        instantiate this object at all."
		characteristics "-N entLogicalContextEngineID -O 1.3.6.1.2.1.47.1.2.1.1.7 -T STRING -A RO -X equal -F 0"

		readonly octet[255]	entLogicalContextName
		description 	"The contextName that can be used to send an SNMP message
        concerning information held by this logical entity, to the
        address specified by the associated
        'entLogicalTAddress/entLogicalTDomain' pair.
        
        This object, together with the associated
        entLogicalContextEngineID object, defines the context
        associated with a particular logical entity, and allows
        
        
        access to SNMP engines identified by a contextEngineId and
        contextName pair.
        
        If no value has been configured by the agent, a zero-length
        string is returned, or the agent may choose not to
        instantiate this object at all."
		characteristics "-N entLogicalContextName -O 1.3.6.1.2.1.47.1.2.1.1.8 -T STRING -A RO -X equal -F 0"

	)

	table	entLPMappingTable
	description "This table contains zero or more rows of logical entity to
        physical equipment associations.  For each logical entity
        known by this agent, there are zero or more mappings to the
        physical resources, which are used to realize that logical
        entity.
        
        An agent should limit the number and nature of entries in
        this table such that only meaningful and non-redundant
        information is returned.  For example, in a system that
        contains a single power supply, mappings between logical
        entities and the power supply are not useful and should not
        be included.
        
        Also, only the most appropriate physical component, which is
        closest to the root of a particular containment tree, should
        be identified in an entLPMapping entry.
        
        For example, suppose a bridge is realized on a particular
        module, and all ports on that module are ports on this
        bridge.  A mapping between the bridge and the module would
        be useful, but additional mappings between the bridge and
        each of the ports on that module would be redundant (because
        the entPhysicalContainedIn hierarchy can provide the same
        information).  On the other hand, if more than one bridge
        were utilizing ports on this module, then mappings between
        each bridge and the ports it used would be appropriate.
        
        Also, in the case of a single backplane repeater, a mapping
        for the backplane to the single repeater entity is not
        necessary."
	characteristics "-K ONE"
	(
		readonly int	entLPPhysicalIndex
		description 	"The value of this object identifies the index value of a
        particular entPhysicalEntry associated with the indicated
        entLogicalEntity."
		characteristics "-N entLPPhysicalIndex -O 1.3.6.1.2.1.47.1.3.1.1.1 -T INTEGER -A RO -X equal -F 0"

	)

	table	entAliasMappingTable
	description "This table contains zero or more rows, representing
        mappings of logical entity and physical component to
        external MIB identifiers.  Each physical port in the system
        may be associated with a mapping to an external identifier,
        which itself is associated with a particular logical
        entity's naming scope.  A 'wildcard' mechanism is provided
        to indicate that an identifier is associated with more than
        one logical entity."
	characteristics "-K ONE"
	(
		notaccessible int	entAliasLogicalIndexOrZero
		description 	"The value of this object identifies the logical entity
        that defines the naming scope for the associated instance
        of the 'entAliasMappingIdentifier' object.
        
        If this object has a non-zero value, then it identifies the
        logical entity named by the same value of entLogicalIndex.
        
        If this object has a value of zero, then the mapping between
        the physical component and the alias identifier for this
        entAliasMapping entry is associated with all unspecified
        logical entities.  That is, a value of zero (the default
        mapping) identifies any logical entity that does not have
        an explicit entry in this table for a particular
        entPhysicalIndex/entAliasMappingIdentifier pair.
        
        For example, to indicate that a particular interface (e.g.,
        physical component 33) is identified by the same value of
        ifIndex for all logical entities, the following instance
        might exist:
        
                entAliasMappingIdentifier.33.0 = ifIndex.5
        
        In the event an entPhysicalEntry is associated differently
        for some logical entities, additional entAliasMapping
        entries may exist, e.g.:
        
        
                entAliasMappingIdentifier.33.0 = ifIndex.6
                entAliasMappingIdentifier.33.4 =  ifIndex.1
                entAliasMappingIdentifier.33.5 =  ifIndex.1
                entAliasMappingIdentifier.33.10 = ifIndex.12
        
        Note that entries with non-zero entAliasLogicalIndexOrZero
        index values have precedence over zero-indexed entries.  In
        this example, all logical entities except 4, 5, and 10,
        associate physical entity 33 with ifIndex.6."
		characteristics "-N entAliasLogicalIndexOrZero -O 1.3.6.1.2.1.47.1.3.2.1.1 -T INTEGER -A NA -X equal -F 0"

		readonly objectid	entAliasMappingIdentifier
		description 	"The value of this object identifies a particular conceptual
        row associated with the indicated entPhysicalIndex and
        entLogicalIndex pair.
        
        Because only physical ports are modeled in this table, only
        entries that represent interfaces or ports are allowed.  If
        an ifEntry exists on behalf of a particular physical port,
        then this object should identify the associated 'ifEntry'.
        For repeater ports, the appropriate row in the
        'rptrPortGroupTable' should be identified instead.
        
        For example, suppose a physical port was represented by
        entPhysicalEntry.3, entLogicalEntry.15 existed for a
        repeater, and entLogicalEntry.22 existed for a bridge.  Then
        there might be two related instances of
        entAliasMappingIdentifier:
           entAliasMappingIdentifier.3.15 == rptrPortGroupIndex.5.2
           entAliasMappingIdentifier.3.22 == ifIndex.17
        It is possible that other mappings (besides interfaces and
        repeater ports) may be defined in the future, as required.
        
        Bridge ports are identified by examining the Bridge MIB and
        appropriate ifEntries associated with each 'dot1dBasePort',
        and are thus not represented in this table."
		characteristics "-N entAliasMappingIdentifier -O 1.3.6.1.2.1.47.1.3.2.1.2 -T OBJECTID -A RO -X equal -F 0"

	)

	table	entPhysicalContainsTable
	description "A table that exposes the container/'containee'
        relationships between physical entities.  This table
        provides all the information found by constructing the
        virtual containment tree for a given entPhysicalTable, but
        in a more direct format.
        
        In the event a physical entity is contained by more than one
        other physical entity (e.g., double-wide modules), this
        table should include these additional mappings, which cannot
        be represented in the entPhysicalTable virtual containment
        tree."
	characteristics "-K ONE"
	(
		readonly int	entPhysicalChildIndex
		description 	"The value of entPhysicalIndex for the contained physical
        entity."
		characteristics "-N entPhysicalChildIndex -O 1.3.6.1.2.1.47.1.3.3.1.1 -T INTEGER -A RO -X equal -F 0"

	)

	group	entityGeneral
	description "(null)"
	characteristics "-K NONE"
	(
		readonly timeticks	entLastChangeTime
		description 	"The value of sysUpTime at the time a conceptual row is
        created, modified, or deleted in any of these tables:
                - entPhysicalTable
                - entLogicalTable
                - entLPMappingTable
                - entAliasMappingTable
        
        
                - entPhysicalContainsTable"
		characteristics "-N entLastChangeTime -O 1.3.6.1.2.1.47.1.4.1 -T TIMETICKS -A RO -X equal -F 0"

	)

agenterrors (
	1	"cannot dispatch request"
	2	"select(2) failed"
	3	"sendto(2) failed"
	4	"recvfrom(2) failed"
	5	"no response from system"
	6	"response too big"
	7	"missing attribute"
	8	"bad attribute type"
	9	"cannot get sysUpTime"
	10	"sysUpTime type bad"
	11	"unknown SNMP error"
	12	"bad variable value"
	13	"variable is read only"
	14	"general error"
	15	"cannot make request PDU"
	16	"cannot make request varbind list"
	17	"cannot parse response PDU"
	18	"request ID - response ID mismatch"
	19	"string contains non-displayable characters"
	20	"cannot open schema file"
	21	"cannot parse schema file"
	22	"cannot open host file"
	23	"cannot parse host file"
	24	"attribute unavailable for set operations"
             )
)


## End of Agent Definitions
