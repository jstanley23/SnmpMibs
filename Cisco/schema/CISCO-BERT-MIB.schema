## THIS FILE WAS GENERATED BY MIB2SCHEMA
## For attributes containing printable ASCII
## characters, you may add a format string
## specification in the attribute characteristics
## line
## As described in RFC 1157, some agents cannot
## accept messages whose length exceeds 484 octets
## For those groups whose var-bind list has many
## entries, you may split them up into different
## var-bind lists
proxy CISCO-BERT-MIB
description "CISCO-BERT-MIB agent"
serial 2
rpcid 100122
(

## Enumerated Type Definitions

	enum	cbTestPatternE (
	   1	"allZeros"
	   2	"allOnes"
	   3	"altOneZero"
	   4	"doubleAltOnesZeros"
	   5	"oneIn4"
	   6	"oneIn8"
	   7	"oneIn16"
	   8	"threeIn24"
	   9	"inbandLoopBackActivate"
	   10	"inbandLoopBackDeactivate"
	   11	"twoE3MinusOne"
	   12	"twoE4MinusOne"
	   13	"twoE5MinusOne"
	   14	"twoE6MinusOne"
	   15	"twoE7MinusOne"
	   16	"twoE7MinusOneFT1Loopup"
	   17	"twoE7MinusOneFT1Loopdown"
	   18	"twoE9MinusOne"
	   19	"twoE10MinusOne"
	   20	"twoE11MinusOne"
	   21	"twoE15MinusOne"
	   22	"twoE17MinusOne"
	   23	"twoE18MinusOne"
	   24	"twoE20MinusOne"
	   25	"twoE20MinusOneQRSS"
	   26	"twoE21MinusOne"
	   27	"twoE22MinusOne"
	   28	"twoE23MinusOne"
	   29	"twoE25MinusOne"
	   30	"twoE28MinusOne"
	   31	"twoE29MinusOne"
	   32	"twoE31MinusOne"
	   33	"dds1pattern"
	   34	"dds2pattern"
	   35	"dds3pattern"
	   36	"dds4pattern"
	   37	"dds5pattern"
	   38	"userPattern"
	)

	enum	cbBertTxPatternInvE (
	   1	"notInverted"
	   2	"inverted"
	)

	enum	cbBertRxPatternInvE (
	   1	"notInverted"
	   2	"inverted"
	)

	enum	cbLoopbackE (
	   1	"farEndLineLoopback"
	   2	"remoteLineLoopback"
	   3	"localLoopback"
	   4	"farEndPayloadLoopback"
	   5	"remotePayloadLoopback"
	   6	"noLoopback"
	)

	enum	cbLoopbackCodeE (
	   1	"nonLatchOCUwith1"
	   2	"nonLatchOCUwithout1"
	   3	"nonLatchCSU"
	   4	"nonLatchDSU"
	   5	"latchDS0Drop"
	   6	"latchDS0Line"
	   7	"latchOCU"
	   8	"latchCSU"
	   9	"latchDSU"
	   10	"latchHL96"
	   11	"v54PN127Polynomial"
	   12	"lineInband"
	   13	"lineLoopbackESF"
	   14	"localLoopback"
	   15	"noLoopbackCode"
	   16	"payloadLoopbackESF"
	   17	"lineLoopbackFEAC"
	   18	"smartJackInband"
	)

	enum	cbSingleBitErrorInsertE (
	   1	"noError"
	   2	"insertError"
	)

	enum	cbErrorInsertionRateE (
	   1	"noError"
	   2	"oneInTen"
	   3	"oneInHundred"
	   4	"oneInThousand"
	   5	"oneInTenThousand"
	   6	"oneInHundredThousand"
	   7	"oneInMillion"
	   8	"oneInTenMillion"
	)

	enum	cbOperStatusE (
	   1	"success"
	   2	"inSync"
	   3	"outOfSync"
	   4	"inLoopback"
	   5	"clockOutOfSync"
	   6	"bertFailed"
	)

	enum	cbFailedReasonE (
	   1	"aborted"
	   2	"loopbackFailed"
	   3	"interfaceStateChange"
	   4	"processorModuleStateChange"
	   5	"unknown"
	)

	enum	cbRowStatusE (
	   1	"active"
	   2	"notInService"
	   3	"notReady"
	   4	"createAndGo"
	   5	"createAndWait"
	   6	"destroy"
	)


## Group and Table Declarations

	table	cbConfTable
	description "This table contains configuration, control and status parameters 
         for performing Bit Error Rate Test (BERT) on an interface. 
         When cbRowStatus is 'active', ifOperStatus will be set to 'testing'."
	characteristics "-K ???"
	(
		readwrite enum cbTestPatternE	cbTestPattern
		description 	"The BERT pattern to be sent and expected to be received.
         An implementation may choose to support only selected patterns.
         In some implementations, this object can not be modified when 
         the BERT is running, i.e cbRowStatus is active(1)."
		characteristics "-N cbTestPattern -O 1.3.6.1.4.1.9.9.185.1.1.1.1.1 -T INTEGER -A RW -X equal -F 0"

		readwrite octet[4]	cbUserPattern
		description 	"The object used for configuring the user defined pattern
         for BERT.  This is the fixed repeating BERT pattern sent
         and expected to be received when the cbTestPattern object is
         set to 'userPattern'.  The maximum length of this pattern
         is 32 bits.  Depending on the hardware, the patterns are 
         transmitted with least significant first or most 
         significant bit, until pattern length is reached.
        
         This object can not be modified when the BERT is running,
         i.e cbRowStatus is active(1)."
		characteristics "-N cbUserPattern -O 1.3.6.1.4.1.9.9.185.1.1.1.1.2 -T STRING -A RW -X equal -F 0"

		readwrite enum cbBertTxPatternInvE	cbBertTxPatternInv
		description 	"This controls inversion of the transmit BERT pattern.
        Possible values are :
        
        notInverted(1): Pattern is transmitted normally.
        inverted(2):  Each Mark is replaced by Space and 
        vice versa.
        
        For predefined BERT patterns, the value for this Object
         may not be modified.  An implementation may choose to 
        ignore the value of this object, for BERT patterns other 
        than 'userPattern'.  When the value is ignored, the
        object contains the value chosen by the underlying hardware.
        
        This object can not be modified when the BERT is running
        i.e cbRowStatus is active(1)."
		characteristics "-N cbBertTxPatternInv -O 1.3.6.1.4.1.9.9.185.1.1.1.1.3 -T INTEGER -A RW -X equal -F 0"

		readwrite enum cbBertRxPatternInvE	cbBertRxPatternInv
		description 	"This controls inversion of the received BERT pattern.
         Possible values are :
        
        notInverted(1) : Pattern received is not inverted.
        inverted(2)    : each Mark is replaced by Space and 
        vice versa.
        
        When set to inverted(1), the received data is inverted
        before being processed by the pattern detector.
        For predefined BERT patterns, the value for this object
         may not be modified.  An implementation may choose to 
        ignore the value of this object, for BERT patterns other 
        than 'userPattern'.  When the value is ignored, the
        object contains the value chosen by the underlying 
        hardware.
        
        This object can not be modified when the BERT is running
        i.e cbRowStatus is active(1)."
		characteristics "-N cbBertRxPatternInv -O 1.3.6.1.4.1.9.9.185.1.1.1.1.4 -T INTEGER -A RW -X equal -F 0"

		readonly enum cbLoopbackE	cbLoopback
		description 	"This object specifies the type of loopback established.
        Possible values are:
        
        farEndLineLoopback(1): This loopback occurs at the CPE upon
        receiving a special code from the
        device which initiates the loopback.
        Upon receiving the loop activation request
        code, the CPE enters a Line loop mode in which it
        returns the entire line back to the initiator.
        The CPE will continue to return the data
        back to the initiator until it receives
        loopback deactivation request code. 
        
        remoteLineLoopback(3): This loopback is established 
        at the Near-end.
        In this loopback the entire line is looped back to the
        Far-end with a) bit-sequence integrity maintained,
        b) no change in framing, and c) no removal of bi-
        polar violations.        
        
        localLoopback(3): This is also known as metallic loopback.
        This loopback is used for checking the
        internal circuitry of the T3/E3, T1/E1 device.
        Only for physical lines.
        
        farEndPayloadLoopback(4): This loopback occurs at the
        CPE upon receiving a special code from the
        device which initiates the loopback.
        Upon receiving the loop activation request
        code, CPE enters a Payload loop mode in which it
        returns the Payload of the received data back
        to the initiator.
        The CPE will continue to return the data
        back to the initiator until it receives
        loopback deactivation request code.
        
        remotePayloadLoopback(5): This loopback is established 
        at the Near-end.
        In this loopback the signal that is returned to the
        Far-end consists of the payload of the received signal
        (with bit sequence integrity retained) and newly
        generated framing information.
        
        noLoopback(6):   There is no loopback established
        on the device.  "
		characteristics "-N cbLoopback -O 1.3.6.1.4.1.9.9.185.1.1.1.1.5 -T INTEGER -A RO -X equal -F 0"

		readwrite enum cbLoopbackCodeE	cbLoopbackCode
		description 	"This object specifies the type of the end device and
         the type of loopback code used.
        
         Latching Loopback: Latching Loopback is appropriate with
         64 kbit/s DS0-A rate.  Once invoked by a specific activation
         sequence, it typically remains in effect until released by
         another specific code sequence.
        
        non-latching loopback:  Non latching activation involves
         continuous transmission of loopback command codes, followed
         by test data interspersed with command codes.
         The possible values are:
        Note: The values 1 to 14 are for farEndLoopback.
        cbLoopback object is farEndLoopback(1) when these values are 
        selected.
        
        nonLatchOCUwithOneDevice(1): Non-latching OCU with one device.
        
        nonLatchOCUwithChainDevices(2): Non-latching OCU with chain
        of devices.
        
        nonLatchCSU(3)                 : Non-latching CSU.
        
        nonLatchDSU(4)                 : Non-latching DSU.
        
        latchDS0Drop(5)                : Latching DS0-DP Drop device.
        
        latchDS0Line(6)                : Latching DS0-DP line device.
        
        latchOCU(7)                    : Latching OCU.
        
        latchCSU(8)                    : Latching CSU.
        
        latchDSU(9)                    : Latching DSU.
        
        latchHL96(10)                  : Latching HL96 device.
        
        v54PN127Polynomial(11)         : For fractional T1.
        This loopback is based on
        CCITT-ITU V.54 and is being
        used to place either a single
        DS0 or a DS0 Bundle(N*DS0) in
        loopback mode.
        
        lineInband(12)                  : This is used for loopback the
        entire T1 line at the far end.
        This is a repeating 5-bit
        pattern(00001).
        
        lineLoopbackESF(13): This loopback result in a full
        1.544Mbit/s loopback of the
        incoming signal at the far end.
        The loopback is activated (latched) and
        deactivated by a bit sequence defined in
        ANSI T1.403 - 1995.
        This corresponds to Facility Data Link
        (FDL)loopbacks on a T1 channel.
        This causes a repeating,16-bit ESF data
        link code word(00001110 11111111) to
        the remote end requesting that it
        enter into a network line loopback.
        
        localLoopback(14): This is for loop back at the 
        near end (facility end).
        This is used to test the internals of the
        device, the interface loops back the 
        outbound traffic from SRM to SM, back to 
        the SRM, hence testing the internal device
        connectivity.
        
        noLoopbackCode(15): This is for situations, where 
        no loopback is needed for bert tests. 
        One example is manual loop back at near or
                 far end.
        
        payloadLoopbackESF(16): This loopback results 
        in 1.536 Mbit/s loopback of the payload
        of the incoming signal at the far end.
        The loopback is activated (latched) and 
        deactivated by a bit sequence defined in
        ANSI T1.403 - 1995.
        This corresponds to Facility Data Link
        (FDL)loopbacks on a T1 channel.
        This causes a repeating, 16-bit ESF data
        link code word(00010100 11111111) to
        the remote end requesting that it
        enter into a network payload loopback.
        
        lineLoopbackFEAC(17): Use the FEAC channel to 
        establish a line loopback. 
        
         smartJackInband(18): Inband loop code for SmartJack (a Telco owned 
                 device that represents the demarcation point of T1 service),
                 Ref: TR-TSY-000312."
		characteristics "-N cbLoopbackCode -O 1.3.6.1.4.1.9.9.185.1.1.1.1.6 -T INTEGER -A RW -X equal -F 0"

		readwrite enum cbSingleBitErrorInsertE	cbSingleBitErrorInsert
		description 	"This object is used for inserting single bit error in the 
        transmitted BERT pattern.
        
        The possible values are:
        
        noError(1)      : do not insert single bit errors
        
        insertError(2)  : insert single bit errors. "
		characteristics "-N cbSingleBitErrorInsert -O 1.3.6.1.4.1.9.9.185.1.1.1.1.7 -T INTEGER -A RW -X equal -F 0"

		readwrite enum cbErrorInsertionRateE	cbErrorInsertionRate
		description 	"This object is used for injecting continuous errors into 
        transmitted BERT pattern.  The errors are inserted in a BERT 
         pattern sent, in order to do sanity check on receive interface 
         in the event that no bit errors are detected.  Injecting errors 
         allows users to stress communication links and to check the 
        functionality of error monitoring equipment along the path.
         Once set to send continuous errors, errors will be inserted 
         at the configured rate until set to noError(1). 
        
         The possible values are :
        
        noError(1) : no bit errors are inserted.
        
        oneInTen(2) : insert bit errors at the rate of 1 bit
        error per 10 bits (10^-1) transmitted.
        
        oneInHundred(3) : insert bit errors at the rate of 1 bit
        error per 100 bits (10^-2) transmitted.
        
        oneInThousand(4): insert bit errors at the rate of 1 bit
        error per 1000 bits (10^-3) transmitted.
        
        oneIn10Thousand(5): insert bit errors at the rate of 1 bit
        error per 10000 (10^-4) bits transmitted.
        
        oneInHundredThousand(6): insert bit errors at the rate of 1 bit
        error per 100000 bits (10^-5) transmitted.
        
        oneInMillion(7): insert bit errors at the rate of 1 bit
        error per 1000000 bits (10^-6) transmitted.
        
        oneInTenMillion(8): insert bit errors at the rate of 1 bit
        error per 10,000,000 (10^-7)bits transmitted. "
		characteristics "-N cbErrorInsertionRate -O 1.3.6.1.4.1.9.9.185.1.1.1.1.8 -T INTEGER -A RW -X equal -F 0"

		readwrite int	cbDuration
		description 	"This object specifies the duration for which BERT is
        to be run. "
		characteristics "-N cbDuration -O 1.3.6.1.4.1.9.9.185.1.1.1.1.9 -T INTEGER -A RW -X equal -F 0"

		readonly enum cbOperStatusE	cbOperStatus
		description 	"This object shows the status of BERT in the shelf.
        The values for this object are valid only when
        cbRowStatus contains active(1).
        
        Possible values for this object:
        
        success(1)   : BERT is successfully completed.
        
        inSync(2)    : BERT is activated and receive side is
        synchronized with the incoming sequence of patterns.
        
        outOfSync(3) : BERT is activated, but receive is out 
        of synchronization with the incoming 
        sequence.  Criteria for out of 
        synchronization state is defined in 
        ITU document O.150.
        
        inLoopback(4): loopback establish or de-establish in
        progress.  The type of loopback can be 
        determined by cbLoopback.
        
        clockOutOfSync(5): When the send and receive clocks are not
        synchronized.
        
        bertFailed(6): BERT failed.  The cbFailedReason object
        contains the reason for the failure."
		characteristics "-N cbOperStatus -O 1.3.6.1.4.1.9.9.185.1.1.1.1.10 -T INTEGER -A RO -X equal -F 0"

		readonly enum cbFailedReasonE	cbFailedReason
		description 	"This object contains the reason for the BERT failure.
        This object gives the additional information when
        cbOperStatus is set to bertFailed(6).
        
        The possible values are :
        
        aborted(1)              : BERT test is completed as
        a result of a user request.
        
        loopbackFailed(2)       :  loop up operation failed.
        
        interfaceStateChange(3) :  interface State changed due to
        module state change.
        
         processorModuleStateChange(4) : Processor module 
        changed state.
        
        unknown(5) : Failure Reason Unknown. "
		characteristics "-N cbFailedReason -O 1.3.6.1.4.1.9.9.185.1.1.1.1.11 -T INTEGER -A RO -X equal -F 0"

		readonly octet[11]	cbStartDateAndTime
		description 	"The Date and Time when the last BERT testing is started
        on the interface.  This object is valid only when 
         cbRowStatus is active(1). "
		characteristics "-N cbStartDateAndTime -O 1.3.6.1.4.1.9.9.185.1.1.1.1.12 -T STRING -A RO -X equal -F 0"

		readwrite int	cbDS0DPCodeIteration
		description 	"Valid only with cbLoopbackCode = latchDS0Drop. 
        DSP-OP devices can be cross connected in the central
        office in a daisy chain.  By this, the user has
        capability to put any of the devices in the chain in
        loopback mode.  A value of 1 results in no iteration
        and will cause the very first device in chain to go 
        into loop back.  A value of 2 will result into one
        iteration and will cause the second device to
        go into loopback and so on.  This tests the channels
        across multiple devices connected in a chain. "
		characteristics "-N cbDS0DPCodeIteration -O 1.3.6.1.4.1.9.9.185.1.1.1.1.13 -T INTEGER -A RW -X equal -F 0"

		readwrite enum cbRowStatusE	cbRowStatus
		description 	"The status of this conceptual row.  This object is used for
         create or modify or deleting an entry from this table.
        
         To create a row in this table, a manager must set this
         object to either createAndGo(4) or createAndWait(5).
        
        Until instances of all corresponding columns are appropriately
        configured, the value of the corresponding instance of the
        cbRowStatus is notReady(3).
        
        An entry can be deleted by setting this object to destroy(6).
        
        STARTING BERT: Two approaches:
        
         1. set this object to createAndGo(4) with all the mandatory
        objects set to valid values.
        
         2. Set this object to createAndWait(4).  Reading this object
         at this stage returns notReady(3).
        
         Set all the other required objects with valid values.
        
        Set this object to active(1).
        
        STOP/RESTART BERT:
        
        The BERT can be stopped by setting this object to 
         notInService(2).  After setting it to notInService(2),
         some parameters can be modified and BERT can be started
        by setting this object to active(1).
        
        STOP BERT:
        
        An entry can be deleted by setting this object 
        to destroy(6).
        Deleting an entry stops the BERT test. "
		characteristics "-N cbRowStatus -O 1.3.6.1.4.1.9.9.185.1.1.1.1.14 -T INTEGER -A RW -X equal -F 0"

		readwrite octet[4]	cbDs0BitMap
		description 	"This object is only used IF the interface type is DS1
         (ifType is 18 on ifTable).
         This object is used to indicate which DS0 is involved
         on the BERT.
         The defualt value (DEFVAL) is valid and should be used 
         for implementation purposes. But the DEFVAL is commented  
         out due to known mib compiler problems associated with  
         DEFVAL clauses in objects using BITS SYNTAX."
		characteristics "-N cbDs0BitMap -O 1.3.6.1.4.1.9.9.185.1.1.1.1.15 -T STRING -A RW -X equal -F 0"

	)

	table	cbStatsTable
	description "This table contains BERT related real time counters.
        Counters in this table are reset to zero every time
        BERT is started on this interface. "
	characteristics "-K ???"
	(
		readonly counter	cbTxBitCountLower
		description 	"The total number of bits transmitted."
		characteristics "-N cbTxBitCountLower -O 1.3.6.1.4.1.9.9.185.1.1.2.1.1 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbTxBitCountUpper
		description 	"The number of times the associated cbTxBitCountLower object has
         wrapped (i.e. restarted from zero)."
		characteristics "-N cbTxBitCountUpper -O 1.3.6.1.4.1.9.9.185.1.1.2.1.2 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbHCTxBitCounts
		description 	"The total number of bits transmitted.  This object is
         a 64-bit version of cbTxBitCounts. "
		characteristics "-N cbHCTxBitCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.3 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbRxBitCountLower
		description 	"The total number of bits received. "
		characteristics "-N cbRxBitCountLower -O 1.3.6.1.4.1.9.9.185.1.1.2.1.4 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbRxBitCountUpper
		description 	"The number of times the associated cbRxBitCountLower counter has
         wrapped (i.e. restarted from zero)."
		characteristics "-N cbRxBitCountUpper -O 1.3.6.1.4.1.9.9.185.1.1.2.1.5 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbHCRxBitCounts
		description 	"The total number of bits received.  This object is 
        64-bit version of cbRxBitCounts. "
		characteristics "-N cbHCRxBitCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.6 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbRxBitErrCountLower
		description 	"The total number of bit errors detected in the received 
        pattern. "
		characteristics "-N cbRxBitErrCountLower -O 1.3.6.1.4.1.9.9.185.1.1.2.1.7 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbRxBitErrCountUpper
		description 	"The number of times the associated cbRxBitErrCountLower counter has
         wrapped (i.e. restarted from zero)."
		characteristics "-N cbRxBitErrCountUpper -O 1.3.6.1.4.1.9.9.185.1.1.2.1.8 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbHCRxBitErrCounts
		description 	"The number of bit errors detected in the received pattern.
        This is the 64-bit version of cbRxBitErrCounts. "
		characteristics "-N cbHCRxBitErrCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.9 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbSyncLossCounts
		description 	"This is the count of number of times that synchronization has 
         been lost since the BERT was started or restarted. "
		characteristics "-N cbSyncLossCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.10 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbPatternLossCounts
		description 	"The number of 1 second intervals during the BER test in
         which pattern synchronization was not maintained for the
        entire second. "
		characteristics "-N cbPatternLossCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.11 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbFrameLossCounts
		description 	"The number of 1 second intervals during the BER test in
        which frame synchronization was not maintained for the
        entire second. "
		characteristics "-N cbFrameLossCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.12 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbESsCounts
		description 	"Number of 1 second interval during the BER test that at least
         one bit error was detected in the received data pattern. "
		characteristics "-N cbESsCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.13 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbSESsCounts
		description 	"The number of 1 second intervals during the BER test that
         the Bit Error Rate was greater than 10^-3. "
		characteristics "-N cbSESsCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.14 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbEFSsCounts
		description 	"The number of 1 second intervals during the BER test that 
         there were not errors detected and pattern synchronization
         was maintained. "
		characteristics "-N cbEFSsCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.15 -T COUNTER -A RO -X equal -F 0"

		readonly counter	cbErrorInjectCounts
		description 	"This object contains the number of times error was injected."
		characteristics "-N cbErrorInjectCounts -O 1.3.6.1.4.1.9.9.185.1.1.2.1.16 -T COUNTER -A RO -X equal -F 0"

	)

agenterrors (
	1	"cannot dispatch request"
	2	"select(2) failed"
	3	"sendto(2) failed"
	4	"recvfrom(2) failed"
	5	"no response from system"
	6	"response too big"
	7	"missing attribute"
	8	"bad attribute type"
	9	"cannot get sysUpTime"
	10	"sysUpTime type bad"
	11	"unknown SNMP error"
	12	"bad variable value"
	13	"variable is read only"
	14	"general error"
	15	"cannot make request PDU"
	16	"cannot make request varbind list"
	17	"cannot parse response PDU"
	18	"request ID - response ID mismatch"
	19	"string contains non-displayable characters"
	20	"cannot open schema file"
	21	"cannot parse schema file"
	22	"cannot open host file"
	23	"cannot parse host file"
	24	"attribute unavailable for set operations"
             )
)


## End of Agent Definitions
