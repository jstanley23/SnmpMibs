## THIS FILE WAS GENERATED BY MIB2SCHEMA
## For attributes containing printable ASCII
## characters, you may add a format string
## specification in the attribute characteristics
## line
## As described in RFC 1157, some agents cannot
## accept messages whose length exceeds 484 octets
## For those groups whose var-bind list has many
## entries, you may split them up into different
## var-bind lists
proxy CISCO-WAN-SCT-MGMT-MIB
description "CISCO-WAN-SCT-MGMT-MIB agent"
serial 2
rpcid 100122
(

## Enumerated Type Definitions

	enum	cwSctCardTypeE (
	   1	"axsm"
	   2	"axsme"
	   3	"pxm1e"
	   4	"hsfr"
	   5	"axsmxg"
	)

	enum	cwSctTypeE (
	   1	"portSct"
	   2	"cardSct"
	)

	enum	cwSctFileOperStatusE (
	   1	"valid"
	   2	"invalid"
	   3	"absent"
	)

	enum	cwSctFileRowStatusE (
	   1	"active"
	   2	"notInService"
	   3	"notReady"
	   4	"createAndGo"
	   5	"createAndWait"
	   6	"destroy"
	)


## Group and Table Declarations

	table	cwSctFileMgmtTable
	description "This MIB defines a SCT file management table in which each row 
         corresponds to a unique SCT file. 
        
         When the NMS needs to add a SCT to a node, it transfers the SCT
         file to a transient storage area on the node. The NMS then 
         performs a SET operation requesting the agent to accept the 
         transferred file. The agent validates the integrity of the 
         file and if valid, transfers the file to a secure area. It 
         would then create a new row in the SCT file management table. This
         newly added row is then advertised to all NMS in the network using
         appropriate traps (refer CISCO-WAN-SCT-MGMT-TRAPS-MIB). 
        
         Once a row is created, the agent keeps track of the operational
         status of the corresponding SCT file. The NMS can query the status
         of a SCT file by performing a GET operation on the row.
        
         The NMS can delete a SCT file and its corresponding row in the SCT
         file management table by performing a SET operation with the 
         appropriate RowStatus. The agent, upon successful deletion
         of the row would advertise this configuration change to all the
         NMS using appropriate traps.
        
         The NMS could also perform a GETNEXT operation to discover all the
         configured SCTs on a node."
	characteristics "-K FOUR"
	(
		notaccessible enum cwSctCardTypeE	cwSctCardType
		description 	"This represents service modules in a node that require the 
         use of a SCT. The content of the SCT varies depending on the
         specific hardware used. Hence there is a different SCT for
         every type of card. The card types that support SCTs are
         listed in the SYNTAX clause"
		characteristics "-N cwSctCardType -O 1.3.6.1.4.1.9.9.236.1.1.1.1 -T INTEGER -A NA -X equal -F 0"

		notaccessible enum cwSctTypeE	cwSctType
		description 	"There are several types of SCTs. The portSct (1) specifies
         traffic parameters that are applicable to a logical port 
         within a card. The cardSct (2) specifies traffic parameters
         that are applicable to the whole card."
		characteristics "-N cwSctType -O 1.3.6.1.4.1.9.9.236.1.1.1.2 -T INTEGER -A NA -X equal -F 0"

		notaccessible gauge	cwSctId
		description 	"Each logical port on a service module could need different
         'class of service' characteristics. This can be achieved by
         applying different SCTs on different ports. Thus for a given
         card type, there could be multiple SCTs of different IDs."
		characteristics "-N cwSctId -O 1.3.6.1.4.1.9.9.236.1.1.1.3 -T GAUGE -A NA -X equal -F 0"

		notaccessible gauge	cwSctMajorVersion
		description 	"The SCT file consists of several tables. The number of 
         tables depend on the service module card type. Both the
         contents and the row/column size of a table are subject
         to change. The major version is incremented by the manager
         whenever there is a change in the row/column size of the 
         table."
		characteristics "-N cwSctMajorVersion -O 1.3.6.1.4.1.9.9.236.1.1.1.4 -T GAUGE -A NA -X equal -F 0"

		readonly octet[132]	cwSctFileName
		description 	"This object specifies the absolute path name of the file
         corresponding to the SCT indices. 
        
         After the agent accepts a SET operation and creates a new
         row in the SCT file management table, it transfers the file
         from the transient storage area to a secure location on the
         disk. This object identifies the absolute path name of the
         secure location on disk.
        
         The file name would be in the format:
         <CardType>_SCT.<SCTType>.<SCTId>.V<Major version>"
		characteristics "-N cwSctFileName -O 1.3.6.1.4.1.9.9.236.1.1.1.5 -T STRING -A RO -X equal -F 0"

		readonly gauge	cwSctFileMinorVersion
		description 	"The SCT file consists of several tables. The number of 
         tables depend on the service module card type. Both the
         contents and the row/column size of a table are subject
         to change. The minor version is incremented by the manager
         whenever there is a change in contents of the table."
		characteristics "-N cwSctFileMinorVersion -O 1.3.6.1.4.1.9.9.236.1.1.1.6 -T GAUGE -A RO -X equal -F 0"

		readwrite gauge	cwSctFileChecksum
		description 	"The manager specifies this checksum when trying to add
         a SCT on the node. The agent while acting on the SET 
         operation would perform a checksum computation on the
         FTPed file and compare against this object. If they differ,
         the SET operation would be negated. If same, the file is
         considered valid and this value is stored in a persistent
         database. SCT files across the network with the same 
         combination of card type, sct type, major and minor versions
         would have the same checksum."
		characteristics "-N cwSctFileChecksum -O 1.3.6.1.4.1.9.9.236.1.1.1.7 -T GAUGE -A RW -X equal -F 0"

		readwrite octet[132]	cwSctFileDescription
		description 	"A description string can be associated with a specific SCT 
                index and in turn the SCT file. This may be used for 
                associating customized filenames."
		characteristics "-N cwSctFileDescription -O 1.3.6.1.4.1.9.9.236.1.1.1.8 -T STRING -A RW -X equal -F 0"

		readonly enum cwSctFileOperStatusE	cwSctFileOperStatus
		description 	"Reflects the operational status of the SCT file.
        
         The agent sets the value to valid(1) if the computed checksum 
         of the SCT file matches the provisioned checksum.
        
         The agent sets the value to invalid(2) if the computed checksum 
         of the SCT file mismatches with the provisioned checksum. This
         usually suggests a corrupted SCT file.
        
         The agent sets the value to absent(3) if the file is missing in
         the secure area of the disk, while a row exists in the SCT file
         management table."
		characteristics "-N cwSctFileOperStatus -O 1.3.6.1.4.1.9.9.236.1.1.1.9 -T INTEGER -A RO -X equal -F 0"

		readwrite enum cwSctFileRowStatusE	cwSctFileRowStatus
		description 	"
         * To create a row, the manager needs to perform a SET 
           operations with a 'CreateAndGo' option. The agent would
           validate the file specified by the indices if found valid
           would create a new row.
        
         * SET operation with 'CreateAndWait' option will be 
           rejected by the agent.
        
         * SET operations with 'active' option would be treated as 
           a modify operation. The only objects that can be modified 
           in a row are the cwSctFileDescription and the 
           cwSctFileMinorVersion.
        
         * SET operation with a 'Destroy' option would be used for 
           deleting a row in the cwSctFileMgmtTable and its 
           associated SCT file in the switch.
        
         * The GET status of this object would always return 'active'."
		characteristics "-N cwSctFileRowStatus -O 1.3.6.1.4.1.9.9.236.1.1.1.10 -T INTEGER -A RW -X equal -F 0"

	)

agenterrors (
	1	"cannot dispatch request"
	2	"select(2) failed"
	3	"sendto(2) failed"
	4	"recvfrom(2) failed"
	5	"no response from system"
	6	"response too big"
	7	"missing attribute"
	8	"bad attribute type"
	9	"cannot get sysUpTime"
	10	"sysUpTime type bad"
	11	"unknown SNMP error"
	12	"bad variable value"
	13	"variable is read only"
	14	"general error"
	15	"cannot make request PDU"
	16	"cannot make request varbind list"
	17	"cannot parse response PDU"
	18	"request ID - response ID mismatch"
	19	"string contains non-displayable characters"
	20	"cannot open schema file"
	21	"cannot parse schema file"
	22	"cannot open host file"
	23	"cannot parse host file"
	24	"attribute unavailable for set operations"
             )
)


## End of Agent Definitions
